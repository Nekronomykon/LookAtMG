#include "ModelElements.h"

#include "Elements.h"
using namespace vtk;

#include <QFont>
#include <QPalette>
#include <QGuiApplication>

const unsigned short ModelElements::NobleGases[] = {2, 10, 18, 36, 54, 86, 118, NumberOfElements + 1};
//                                                  He Ne  Ar  Kr  Xe  Rn  Og    <finish>

const unsigned short ModelElements::InGroup[] =
    {
        1, /*  H                                             He */ 18 // He
        ,
        1, 2 /* Be                       B */, 13, 14, 15, 16, 17, 18 // Ne
        ,
        1, 2 /* Mg                      Al */, 13, 14, 15, 16, 17, 18 // Ar
        ,
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 // Kr
        ,
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 // Xe
        ,
        1, 2 // Ba
        ,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 // Ln: La-Lu
        ,
        4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 // Rn
        ,
        1, 2 // Fr-Ra
        ,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 // Aq: Ac-Lr
        ,
        4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 // Og
};

const vtkIdType ModelElements::TableForm[] = {
        // 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
        1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 2,
        3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 7, 8, 9, 10,
        11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, 15, 16, 17, 18,
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
        55, 56, -2, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
        87, 88, -3, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
        // 119,120, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -2, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, -1,
        -1, -3, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, -1,
        // -1, -4,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135, -1
};

const vtkIdType ModelElements::IdCore[] = {
  0, 0, // 
  1, 1, 1, 1, 1, 1, 1, 1,
  -1
};

const vtkIdType ModelElements::NumTable = sizeof(ModelElements::TableForm) / sizeof(ModelElements::TableForm[0]);

const float ModelElements::DefaultColors[119][3] = {
  { 7.000000e-02f, 5.000000e-01f, 7.000000e-01f }, //   [0] == XX
  { 1.000000e+00f, 1.000000e+00f, 1.000000e+00f }, //   [1] == H
  { 8.500000e-01f, 1.000000e+00f, 1.000000e+00f }, //   [2] == He
  { 8.000000e-01f, 5.000000e-01f, 1.000000e+00f }, //   [3] == Li
  { 7.600000e-01f, 1.000000e+00f, 0.000000e+00f }, //   [4] == Be
  { 1.000000e+00f, 7.100000e-01f, 7.100000e-01f }, //   [5] == B
  { 5.000000e-01f, 5.000000e-01f, 5.000000e-01f }, //   [6] == C
  { 5.000000e-02f, 5.000000e-02f, 1.000000e+00f }, //   [7] == N
  { 1.000000e+00f, 5.000000e-02f, 5.000000e-02f }, //   [8] == O
  { 7.000000e-01f, 1.000000e+00f, 1.000000e+00f }, //   [9] == F
  { 7.000000e-01f, 8.900000e-01f, 9.600000e-01f }, //  [10] == Ne 
  { 6.700000e-01f, 3.600000e-01f, 9.500000e-01f }, //  [11] == Na
  { 5.400000e-01f, 1.000000e+00f, 0.000000e+00f }, //  [12] == Mg
  { 7.500000e-01f, 6.500000e-01f, 6.500000e-01f }, //  [13] == Al
  { 5.000000e-01f, 6.000000e-01f, 6.000000e-01f }, //  [14] == Si
  { 1.000000e+00f, 5.000000e-01f, 0.000000e+00f }, //  [15] == P
  { 1.000000e+00f, 1.000000e+00f, 1.900000e-01f }, //  [16] == S
  { 1.200000e-01f, 9.400000e-01f, 1.200000e-01f }, //  [17] == Cl
  { 5.000000e-01f, 8.200000e-01f, 8.900000e-01f }, //  [18] == Ar
  { 5.600000e-01f, 2.500000e-01f, 8.300000e-01f }, //  [19] == K
  { 2.400000e-01f, 1.000000e+00f, 0.000000e+00f }, //  [20] == Ca
  { 9.000000e-01f, 9.000000e-01f, 9.000000e-01f }, //  [21] == Sc
  { 7.500000e-01f, 7.600000e-01f, 7.800000e-01f }, //  [22] == Ti
  { 6.500000e-01f, 6.500000e-01f, 6.700000e-01f }, //  [23] == V
  { 5.400000e-01f, 6.000000e-01f, 7.800000e-01f }, //  [24] == Cr
  { 6.100000e-01f, 4.800000e-01f, 7.800000e-01f }, //  [25] == Mn
  { 5.000000e-01f, 4.800000e-01f, 7.800000e-01f }, //  [26] == Fe
  { 4.400000e-01f, 4.800000e-01f, 7.800000e-01f }, //  [27] == Co
  { 3.600000e-01f, 4.800000e-01f, 7.600000e-01f }, //  [28] == Ni
  { 1.000000e+00f, 4.800000e-01f, 3.800000e-01f }, //  [29] == Cu
  { 4.900000e-01f, 5.000000e-01f, 6.900000e-01f }, //  [30] == Zn
  { 7.600000e-01f, 5.600000e-01f, 5.600000e-01f }, //  [31] == Ga
  { 4.000000e-01f, 5.600000e-01f, 5.600000e-01f }, //  [32] == Ge
  { 7.400000e-01f, 5.000000e-01f, 8.900000e-01f }, //  [33] == As
  { 1.000000e+00f, 6.300000e-01f, 0.000000e+00f }, //  [34] == Se
  { 6.500000e-01f, 1.600000e-01f, 1.600000e-01f }, //  [35] == Br
  { 3.600000e-01f, 7.200000e-01f, 8.200000e-01f }, //  [36] == Kr
  { 4.400000e-01f, 1.800000e-01f, 6.900000e-01f }, //  [37] == Rb
  { 0.000000e+00f, 1.000000e+00f, 0.000000e+00f }, //  [38] == Sr
  { 5.800000e-01f, 1.000000e+00f, 1.000000e+00f }, //  [39] == Y
  { 5.800000e-01f, 8.800000e-01f, 8.800000e-01f }, //  [40] == Zr
  { 4.500000e-01f, 7.600000e-01f, 7.900000e-01f }, //  [41] == Nb
  { 3.300000e-01f, 7.100000e-01f, 7.100000e-01f }, //  [42] == Mo
  { 2.300000e-01f, 6.200000e-01f, 6.200000e-01f }, //  [43] == Tc
  { 1.400000e-01f, 5.600000e-01f, 5.600000e-01f }, //  [44] == Ru
  { 4.000000e-02f, 4.900000e-01f, 5.500000e-01f }, //  [45] == Rh
  { 0.000000e+00f, 4.100000e-01f, 5.200000e-01f }, //  [46] == Pd
  { 8.800000e-01f, 8.800000e-01f, 1.000000e+00f }, //  [47] == Ag
  { 1.000000e+00f, 8.500000e-01f, 5.600000e-01f }, //  [48] == Cd
  { 6.500000e-01f, 4.600000e-01f, 4.500000e-01f }, //  [49] == In
  { 4.000000e-01f, 5.000000e-01f, 5.000000e-01f }, //  [50] == Sn
  { 6.200000e-01f, 3.900000e-01f, 7.100000e-01f }, //  [51] == Sb
  { 8.300000e-01f, 4.800000e-01f, 0.000000e+00f }, //  [52] == Te
  { 5.800000e-01f, 0.000000e+00f, 5.800000e-01f }, //  [53] == I
  { 2.600000e-01f, 6.200000e-01f, 6.900000e-01f }, //  [54] == Xe
  { 3.400000e-01f, 9.000000e-02f, 5.600000e-01f }, //  [55] == Cs
  { 0.000000e+00f, 7.900000e-01f, 0.000000e+00f }, //  [56] == Ba
  { 4.400000e-01f, 8.300000e-01f, 1.000000e+00f },
  { 1.000000e+00f, 1.000000e+00f, 7.800000e-01f },
  { 8.500000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 7.800000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 6.400000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 5.600000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 3.800000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 2.700000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 1.900000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 1.200000e-01f, 1.000000e+00f, 7.800000e-01f },
  { 0.000000e+00f, 1.000000e+00f, 6.100000e-01f },
  { 0.000000e+00f, 9.000000e-01f, 4.600000e-01f },
  { 0.000000e+00f, 8.300000e-01f, 3.200000e-01f },
  { 0.000000e+00f, 7.500000e-01f, 2.200000e-01f },
  { 0.000000e+00f, 6.700000e-01f, 1.400000e-01f },
  { 3.000000e-01f, 7.600000e-01f, 1.000000e+00f },
  { 3.000000e-01f, 6.500000e-01f, 1.000000e+00f },
  { 1.300000e-01f, 5.800000e-01f, 8.400000e-01f },
  { 1.500000e-01f, 4.900000e-01f, 6.700000e-01f },
  { 1.500000e-01f, 4.000000e-01f, 5.900000e-01f },
  { 9.000000e-02f, 3.300000e-01f, 5.300000e-01f },
  { 9.600000e-01f, 9.300000e-01f, 8.200000e-01f },
  { 8.000000e-01f, 8.200000e-01f, 1.200000e-01f },
  { 7.100000e-01f, 7.100000e-01f, 7.600000e-01f },
  { 6.500000e-01f, 3.300000e-01f, 3.000000e-01f },
  { 3.400000e-01f, 3.500000e-01f, 3.800000e-01f },
  { 6.200000e-01f, 3.100000e-01f, 7.100000e-01f },
  { 6.700000e-01f, 3.600000e-01f, 0.000000e+00f },
  { 4.600000e-01f, 3.100000e-01f, 2.700000e-01f },
  { 2.600000e-01f, 5.100000e-01f, 5.900000e-01f },
  { 2.600000e-01f, 0.000000e+00f, 4.000000e-01f },
  { 0.000000e+00f, 4.900000e-01f, 0.000000e+00f },
  { 4.400000e-01f, 6.700000e-01f, 9.800000e-01f },
  { 0.000000e+00f, 7.300000e-01f, 1.000000e+00f },
  { 0.000000e+00f, 6.300000e-01f, 1.000000e+00f },
  { 0.000000e+00f, 5.600000e-01f, 1.000000e+00f },
  { 0.000000e+00f, 5.000000e-01f, 1.000000e+00f },
  { 0.000000e+00f, 4.200000e-01f, 1.000000e+00f },
  { 3.300000e-01f, 3.600000e-01f, 9.500000e-01f },
  { 4.700000e-01f, 3.600000e-01f, 8.900000e-01f },
  { 5.400000e-01f, 3.100000e-01f, 8.900000e-01f },
  { 6.300000e-01f, 2.100000e-01f, 8.300000e-01f },
  { 7.000000e-01f, 1.200000e-01f, 8.300000e-01f },
  { 7.000000e-01f, 1.200000e-01f, 7.300000e-01f },
  { 7.000000e-01f, 5.000000e-02f, 6.500000e-01f },
  { 7.400000e-01f, 5.000000e-02f, 5.300000e-01f },
  { 7.800000e-01f, 0.000000e+00f, 4.000000e-01f },
  { 8.000000e-01f, 0.000000e+00f, 3.500000e-01f },
  { 8.200000e-01f, 0.000000e+00f, 3.100000e-01f },
  { 8.500000e-01f, 0.000000e+00f, 2.700000e-01f },
  { 8.800000e-01f, 0.000000e+00f, 2.200000e-01f },
  { 9.000000e-01f, 0.000000e+00f, 1.800000e-01f },
  { 9.100000e-01f, 0.000000e+00f, 1.500000e-01f },
  { 9.200000e-01f, 0.000000e+00f, 1.400000e-01f },
  { 9.300000e-01f, 0.000000e+00f, 1.300000e-01f },
  { 9.400000e-01f, 0.000000e+00f, 1.200000e-01f },
  { 9.500000e-01f, 0.000000e+00f, 1.100000e-01f },
  { 9.600000e-01f, 0.000000e+00f, 1.000000e-01f },
  { 9.700000e-01f, 0.000000e+00f, 9.000000e-02f },
  { 9.800000e-01f, 0.000000e+00f, 8.000000e-02f },
  { 9.900000e-01f, 0.000000e+00f, 7.000000e-02f },
  { 1.000000e+00f, 0.000000e+00f, 6.000000e-02f }
};

ModelElements::ModelElements(QObject *parent)
    : QAbstractTableModel(parent) {}
    
    //------------------------------------------------------------------------------
void ModelElements::ExportDefaultColors(vtkLookupTable* lut)
{
  const unsigned short numColors = Elements::NumberOfElements() + 1;
  const float * rgb = DefaultColors[0];
  lut->SetNumberOfColors(numColors);
  lut->SetIndexedLookup(true);
  // float rgb[3];
  for (vtkIdType i = 0; static_cast<unsigned int>(i) < numColors;)
  {
    lut->SetTableValue(i, rgb[0], rgb[1], rgb[2]);
    lut->SetAnnotation(i, Elements::GetElementSymbol(static_cast<unsigned short>(i)));
    rgb = DefaultColors[++i];
  }
}


QVariant ModelElements::data(const QModelIndex &index, int role) const
{
  // cast index.row() and index.column() into the idElement in the Table;
  vtkIdType ofs = index.row() * NumberOfGroups + index.column();
  if (ofs > NumTable)
    return QVariant();
  vtkIdType idElem = TableForm[ofs];
  if (role == Qt::DisplayRole)
  {
    QVariant res;
    {
      if (idElem >= 0)
      {
        res.setValue(tr(Elements::GetElementSymbol(idElem).c_str()));
      }
      else if (idElem == -2)
        res.setValue(tr("[L]")); // lanthanides
      else if (idElem == -3)
        res.setValue(tr("[A]")); // actinides
      else if (idElem == -4)
        res.setValue(tr("[S]")); // superactinides
    }
    return res;
  }
  else if (role == Qt::BackgroundRole)
  {
    return (idElem < 0 || index.row() > NumberOfPeriods)
               ? qApp->palette().base()
               : qApp->palette().alternateBase();
  }
  else if (role == Qt::TextAlignmentRole)
  {
    return QVariant(Qt::AlignCenter);
  }
  else if (role == Qt::SizeHintRole)
  {
    QFont font;
    return QVariant();
  }
  else
    return QVariant();
}

Qt::ItemFlags ModelElements::flags(const QModelIndex &index) const
{
  Qt::ItemFlags res; // (QAbstractTableModel::flags(index));

  vtkIdType idItem = index.row() * NumberOfGroups + index.column();

  if (TableForm[idItem] >= 0)
    res |= (Qt::ItemIsEnabled | Qt::ItemIsSelectable);

  return res;
}